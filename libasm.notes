x64	x86_64

.
Assembly language is designed for a specific type of processor
Inline ASM is inserting assembly code to a function. EX: int main() { asm("movl %ebx, %eax"); }


TERMINOLOGY
Caller			:
	The function that calls.
	EX: main()

Callee			:
	The called function
	EX: sum()

Registers		: (16?)
	Are storage holders (like RAM) located in the CPU : rax, rbx, rcx, rdx, rdi, rsi, rsp, rbp, r8...r15.
	Registers beginning with 'R' are 64-bit(except for R8D..., R8W..., R8B...), regsiters beginning with 'E' are 32-bit.
	A : Accumulator, C : Counter, D : Data||Destination, B : Base, S : Stack||Source. 
	RAX	Temporary register, first return register (integer), number for syscall
	RBX	Callee-saved register, base pointer
	RSP	Stack pointer?
	RBP Callee-saved register, frame pointer, stack base pointer?
	RDI	First function argument
	RSI	Second argument
	RDX	Third argument, second return register
	RCX	Fourth argument
	R8	Fifth argument
	R9	Sixth argument
	R10	Temp register
	R12	Callee-saved register
	...	
	R15	Callee-saved register

#	eax, ecx, edx, esi, edi, ebx, ebp

Operand
	Value, data, register...

SYS_CALLS
	0x2000004		write

INSTRUCTIONS
MOV		Move data from one location to another
ADD		Add two values
SUB		Subtract a value from another value
PUSH	Push data onto a stack
POP		Pop data from a stack
JMP		Jump to another location
INT		Interrupt a process	


AT&T vs Intel Syntax
	AT&T
		Immediate operands (values) are preceded by $ EX: $1, $5...
		Register operands are preceded by % EX: %ax, %bx...
		Jump/call operands are prefixed by * EX: call *100, jmp *%eax...
		Instruction  source, destination
	Intel
		Instruction  destination, source

